//EPISOD 3

git clone 'The link of the repositry' --> clone the repositry into the specified address(link the repo to this address)
//EPISOD 4

git status  --> display the status of the files of the specified location
git add file --> add the file to the 'Staging area'  (You can add more than one file in the same line)
git add *  --> adds all the files in the specified folder
git rest head file --> remove a file from the 'Staging area' & get it back to the 'working directory'
git commit -m "a discription of what you have done"  --> move the file to the 'Local Repo'
//EPISOD 5

git branch  --> display the branch you are working on
git remote -v  -->display the remote name
git push  remote_name  branch_name   -->move your file from the local repo to the remote repo
//EPISOD 6

git pull remote_ name  --> add all the new files that are on the remote repo to your local repo
//EPISOD 7

git config -l  --> will display the configuration list
git help config  --> will display the full configuration list
git  config --global user.email  --> will display the your user.email
git  config --global user.name "the name of the user"  --> will set the name of the users
git config --global --unset user.name  --> will delete the value of user.name 
git config --gobal --edit --> open the configration file
//EPISOD 8
		/*Creating a key*/
step one--> ssh-keygen -t rsa -b 4096 -C "the email"
step two--> create the key password two times
step three--> cat ~/'the name of the key file'
step four--> copy the content of the file , go to git_hub , open the settings , choose 'SSH and GPG keys' , choose 'New SSH key' , past the content of the
	     key and give it a title
step five--> chek your key using this command  'ssh -T git@github.com' , then enter the key password

//EPISOD 9
		"Creating a repositry inside the command line"

git init --> initialize an empty repositry in the determined location
git add file --> add the file to the staging area
git push commit -m "discription"  --> add the file to the local repo
create a new repo on github
git remote add origin git@github.com:aboantar852003@gmail.com/name_of_the_project.git(this is the 6th line in the repo page)
git push -u remote_name branch_name  --> add the files to the remote repositry(this is the 7th line in the repo page)

//EPISOD 10
		"Pull Request"
watch the full episod

//EPISOD 11
               "aliasing"
git config --global alias.st status  --> git status an alias called "st"
git config --global alias.st -->show the original command of the alias "st"

//EPISOD 12
		   "Branching And Merging"
git branch -->  show the current branch.
git branch "branch_name"  -->creates a new branch
git checkout "branch_name"  --> move to a branch
git branch -d "branch_name"  --> deletes a branch ( Only if it is merged with another one or it isn't commited).
git branch -D "branch_name"  --> deletes a branch wheather it is commited or not.
git checkout -b "branch_name"  --> creates a branch and moves to it.
git merge "branch_name"  --> merges the branch with the current branch
git branch -m "new branch_name"  --> renames the branch


//EPISOD 13,14
		  "Stashing"
git stash --> save the files that exist in the staging area into a stash.
git stash save "a message describing the stash".
git stash list --> show the stash lists that exists.
git stash pop --> pop files from the stash and then deletes the stash.
git stash pop stash@{index_of_stash}  --> pop a specific stash.
git stash apply -->is the same as pop but it doesn't deletes the stash.
git stash drop  --> Deletes the last stash.
git shash drop stash@{index_of_stash}  --> Deletes the specified stash.
git stash clear  --> Deletes all the stashes.
git stash show  --> shows the files inside a stash .
git stash show stash@{index_of_stash}.

//Episod 15
		"Restore And Clean"
git restore --staged "file_name"  -->restore the file from the staging area
git clean -n  -->show the files that will be removed by the "git clean -f" command.
git clean -f  -->deletes all the untracked files in the local reop.


//EPISOD 16
git log  -->shows the commits (first commit is the head commit).
git reset --hard "the hash of the commit that you want to make it the head"  -->change the head commit and remove the commits that are on top the head commit.

//EPISOD 17
		"Ignoring files and directories"
touch .gitignore  --> create a file to add any files/directories you wanna ignore inside it.
git add --force "file_name" --> add an ignored file to the staging area.

//EPISOD 18
		"Tagging And Releasing"
-light weight tag: is a tag that takes its discreption from the commit message.
	git tag "tag_name" -->create a light weight tag.
	git push origin "tag_name"  -->pushes the tag to the rmote repo.
-annotated tag: we write the tage description manually.
	git tag -a "tag_name" -m "tag_discription"
	git push origin "tag_name"  -->pushes the tag to the rmote repo.
//EPISOD 19
		"Tagging And Releasing part2"
git tag -l "v1.*"  -->show all the versions of v1
git tag -d "tag_name"  -->remove a tag locally.
git push origin --delete "tag_name"  -->remove a tag remotly.

